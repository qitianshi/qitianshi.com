// Global mixins.

// Copyright 2023 Qi Tianshi. All rights reserved.


@use "abstracts/variables" as var;

/// Applies a media query to adjust styles for screens up to the width of the
/// specified breakpoint.
///
/// @param {String} $breakpoint - The key of the breakpoint from $breakpoints.
/// @require var.$breakpoints
@mixin respond-to-breakpoint($breakpoint) {

    @if map-has-key($map: var.$breakpoints, $key: $breakpoint) {

        @media screen and (max-width: map-get(var.$breakpoints, $breakpoint)) {
            @content;
        }

    }

    // Raise warning if the key doesn't exist.
    @else {
        @warn "No key `#{$breakpoint}` in $breakpoints.";
    }

}

/// When the screen is narrow, a margin is applied on the left and right edges
/// and the width and max-width are reset, so that the element fills the width
/// of the screen, less the margins.
@mixin apply-mobile-margin() {
    @include respond-to-breakpoint("small") {
        margin-left: var.$mobile-padding;
        margin-right: var.$mobile-padding;
        width: unset;
        max-width: unset;
    }
}

/// When the screen is narrow, changes the left and right paddings to
/// var.$mobile-padding.
@mixin apply-mobile-padding() {
    @include respond-to-breakpoint("small") {
        padding-left: var.$mobile-padding;
        padding-right: var.$mobile-padding;
    }
}

/// Sets the light theme color palette as CSS variables.
@mixin light-theme-palette() {

    --tiangerine-tangerine: #{var.$tiangerine-tangerine-light};

    --background-primary-color: #{var.$background-primary-color-light};
    --background-secondary-color: #{var.$background-secondary-color-light};

    --foreground-primary-color: #{var.$foreground-primary-color-light};
    --foreground-secondary-color: #{var.$foreground-secondary-color-light};
    --foreground-tertiary-color: #{var.$foreground-tertiary-color-light};

    --link-color: #{var.$link-color-light};
    --link-hover-color: #{var.$link-hover-color-light};

    color-scheme: light;

}

/// Sets the dark theme color palette as CSS variables.
@mixin dark-theme-palette() {

    --tiangerine-tangerine: #{var.$tiangerine-tangerine-dark};

    --background-primary-color: #{var.$background-primary-color-dark};
    --background-secondary-color: #{var.$background-secondary-color-dark};

    --foreground-primary-color: #{var.$foreground-primary-color-dark};
    --foreground-secondary-color: #{var.$foreground-secondary-color-dark};
    --foreground-tertiary-color: #{var.$foreground-tertiary-color-dark};

    --link-color: #{var.$link-color-dark};
    --link-hover-color: #{var.$link-hover-color-dark};

    color-scheme: dark;

}

/// Specifies additional styles for the light theme, whether it's applied using
/// @media or .t-light. As much as possible, prefer using color variables.
@mixin light-theme() {

    // When the user has specified the light theme through their browser.
    @media screen and (prefers-color-scheme: light) {
        @content;
    }

    // When the element has been programmatically set to the light theme, or
    // when it's the child of an element that has.
    &.t-light,
    .t-light & {
        @content;
    }

}

/// Specifies additional styles for the dark theme.
@mixin dark-theme() {

    @media screen and (prefers-color-scheme: dark) {
        @content;
    }

    &.t-dark,
    .t-dark & {
        @content;
    }

}

/// Applies the default shadow, with optional :hover styles.
///
/// @param {Bool} $hoverable - Increases the shadow on :hover.
@mixin default-shadow($hoverable: false) {

    box-shadow: var.$small-shadow;

    @if $hoverable {
        &:hover {
            box-shadow: var.$big-shadow;
        }
    }

}

/// Makes elements appear elevated above the primary background. Applies a
/// shadow; in light theme, keeps the background color the same as the
/// primary background, and in dark theme, makes the background the secondary
/// background color.
@mixin hierarchy-elevated() {

    @include default-shadow();

    @include light-theme() {
        background-color: var.$background-primary-color-light;
    }

    @include dark-theme() {
        background-color: var.$background-secondary-color-dark;
    }

}

/// Removes the top and bottom margins from :first-child and :last-child.
@mixin trim-vertical-margins() {

    & :first-child {
        margin-top: 0;
    }

    & :last-child {
        margin-bottom: 0;
    }

}
