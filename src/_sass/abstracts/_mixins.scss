// Global mixins.

// Copyright 2023 Qi Tianshi. All rights reserved.


@use "abstracts/functions" as func;
@use "abstracts/variables" as var;

/// Applies a media query to adjust styles for screens up to the width of the
/// specified breakpoint.
///
/// @param {String} $breakpoint - The key of the breakpoint from $breakpoints.
/// @require var.$breakpoints
@mixin respond-to-breakpoint($breakpoint) {

    @if map-has-key($map: var.$breakpoints, $key: $breakpoint) {

        @media screen and (max-width: map-get(var.$breakpoints, $breakpoint)) {
            @content;
        }

    } @else {

        // Raise warning if the key doesn't exist.
        @error "No key `#{$breakpoint}` in $breakpoints.";

    }

}

/// Adjusts the horizontal spacing of an element for mobile screens.
///
/// @param {Bool} $space-interior - Whether the interior or the exterior should
///     be adjusted. If true, the paddings of the element are changed; if
///     false, the margins are changed and its width is reset.
@mixin mobile-horizontal-spacing($space-interior) {
    @include respond-to-breakpoint("small") {

        $adjusted-property: if($space-interior, padding, margin);
        #{$adjusted-property}-left: var.$mobile-padding;
        #{$adjusted-property}-right: var.$mobile-padding;

        @if (not $space-interior) {
            width: unset;
            max-width: unset;
        }

    }
}

/// Sets the color palette for a chosen color theme as CSS variables.
@mixin set-color-palette($theme) {

    --tiangerine-tangerine: #{func.palette($theme, "tiangerine-tangerine")};

    --background-primary-color: #{func.palette($theme, "background", 1)};
    --background-secondary-color: #{func.palette($theme, "background", 2)};

    --foreground-primary-color: #{func.palette($theme, "foreground", 1)};
    --foreground-secondary-color: #{func.palette($theme, "foreground", 2)};
    --foreground-tertiary-color: #{func.palette($theme, "foreground", 3)};

    --link-color: #{func.palette($theme, "link", 1)};
    --link-hover-color: #{func.palette($theme, "link", 2)};

    color-scheme: $theme;

}

/// Specifies additional styles for a specific color theme.
///
/// @param {String} $theme - The theme for which the styles are applied. Either
///     `light` or `dark`.
/// @param {Bool} $as-fallback - Whether these styles should also be included
///     as a fallback if prefers-color-scheme is not supported. By default,
///     $theme as `light` is the fallback.
@mixin color-theme($theme, $as-fallback: ($theme == light)) {

    @if $as-fallback { @content; }

    @media screen and (prefers-color-scheme: $theme) { @content; }

    &.t-#{$theme}, .t-#{$theme} & { @content; }

}

/// Applies the default shadow, with optional :hover styles.
///
/// @param {Bool} $hoverable - Increases the shadow on :hover.
@mixin default-shadow($hoverable: false) {

    box-shadow: var.$small-shadow;

    @if $hoverable {
        &:hover {
            box-shadow: var.$big-shadow;
        }
    }

}

/// Removes the top and bottom margins from :first-child and :last-child.
@mixin trim-vertical-margins() {

    & :first-child {
        margin-top: 0;
    }

    & :last-child {
        margin-bottom: 0;
    }

}
