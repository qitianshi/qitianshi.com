// Styles for forms.

// Copyright 2023 Qi Tianshi. All rights reserved.


@use "abstracts/functions" as func;
@use "abstracts/mixins" as mix;
@use "abstracts/variables" as var;

// Gives form UI elements the same font family as the rest of the website,
// instead of the default system font.
button,
input,
select,
textarea {
    font-family: inherit;
}

// Styles for all text-style inputs.
input[type=text],
input[type=email],
textarea {

    font-size: 1rem;

    padding: 0.5em;

    border: none;
    border-bottom: var.$default-accent-line-weight solid var(--foreground-secondary-color);
    border-radius: var.$default-accent-line-weight;

    background-color: transparent;

    &:focus {
        border-bottom-color: var(--tiangerine-tangerine);
        outline: none;
    }

}

// Styles for short text-style inputs.
input[type=text],
input[type=email] {

    height: 1.3em;
    max-width: 20em;

    // Changes the color of the WebKit autofill button to match
    // foreground-primary-color for better legibility in the dark theme, except
    // when the input has been auto-filled, in which case the user agent
    // -applied background makes the change unnecessary.
    &:not(input:-webkit-autofill)::-webkit-contacts-auto-fill-button {
        background-color: var(--foreground-primary-color);
    }

}

// Styles for long text-style inputs.
textarea {
    resize: none;
}

// Styles for button-style inputs.
input[type=button],
input[type=submit],
button {

    padding: 0.5em 2em;

    border: var.$default-accent-line-weight solid var(--tiangerine-tangerine);
    border-radius: calc(var.$default-corner-radius / 2);

    font-size: 0.8rem;
    color: var(--tiangerine-tangerine);
    background: none;

    // Transitions for hover effects.
    transition-property: transform, box-shadow, color, background-color;
    transition-duration: 0.4s;
    transition-timing-function: var.$fast-ease-out;

    cursor: pointer;

    * {
        color: inherit;
    }

    @at-root %focused-button-style,
    &:enabled:hover,
    &:enabled:focus {

        background-color: var(--tiangerine-tangerine);
        color: func.palette("dark", "foreground", 1);

        transform: scale(105%);
        box-shadow: var.$small-shadow;

    }

    &:disabled {
        cursor: not-allowed;
    }

}

// The default form object.
.c-form {

    padding: var.$mobile-padding;

    // Formats all immediate children as block-level elements with vertical
    // margins.
    & > * {
        display: block;
        margin: 1em 0;
    }

    label {
        font-weight: 300;
    }

    // Adds an asterisk to labels for required inputs.
    input:required,
    textarea:required {

        & + label::after {

            // A non-breaking space and an asterisk.
            content: "\00a0\002a";

            color: var(--foreground-secondary-color);

        }

        // Changes the color when the input is focused.
        &:focus + label::after {
            color: var(--tiangerine-tangerine);
        }

    }

    &__submit {

        // The minimum width needed to accommodate every state of the button.
        width: 168px;

        & > span[class^="c-form__submit-label"],
        & > span[class*=" c-form__submit-label"] {

            // Only the state that is selected will be displayed.
            display: none;

            // For positioning the UI symbol and the button text.
            align-items: center;
            justify-content: center;
            column-gap: 0.25em;

            // For styling the UI symbol.
            & > svg {

                height: 0.8rem;
                width: auto;

                position: relative;
                top: 1px;

            }

        }

        // Makes the label for the active state visible.
        @each $state in "default", "waiting", "success", "failure" {
            &--#{$state} span.c-form__submit-label--#{$state} {
                display: flex;
            }
        }

        &--waiting {

            // Matches the style of the focused button.
            @extend %focused-button-style;

            // !important overrides the default style for :disabled buttons.
            cursor: wait !important;

            // Spins the loading spinner.
            & > span > svg {
                animation: full-rotation 1s infinite;
                animation-timing-function: cubic-bezier(0.2, 0.5, 0.8, 0.5);
            }

        }

    }

    // A field containing a text-style input and a label. Labels initially
    // appear as full-sized text in the input field, but when the input is
    // focused, the label moves to the top and becomes smaller.
    &__text-field {

        @include mix.z-stack();

        input[type=text],
        input[type=email],
        textarea {

            & + label {

                width: max-content;
                height: max-content;

                // Aligns the label so that it appears horizontally aligned
                // with the input text.
                align-self: start;
                position: relative;
                top: 0.5em;

                // Prevents the label from interfering with clicking the input
                // beneath it.
                pointer-events: none;

                // Transitions for transforming the label on focus.
                transition-property: font-size, transform;
                transition-duration: 0.4s;
                transition-timing-function: var.$fast-ease-out;

            }

            // Transforms the label when the field is focused or when it
            // contains text.
            &:focus,
            &:not(:placeholder-shown) {
                & + label {

                    color: var(--foreground-secondary-color);
                    font-size: 0.7em;
                    transform: translateY(-1.25em);

                }
            }

        }

        // <textarea> elements are stacked with a <pre> element that copies
        // their contents so that the field resizes to fit them. These elements
        // are added programmatically.
        textarea ~ pre[id$="__textarea-sizing"] {

            @extend textarea;

            visibility: hidden;
            margin: 0;

            span {
                white-space: pre-wrap;
            }

        }

    }

    // A warning that is shown when submission repeatedly fails.
    // Programmatically displayed in JavaScript.
    &__multiple-failed-submits-warning {
        display: none;
    }

}
