// Commonly used mixins.

// Copyright 2023 Qi Tianshi. All rights reserved.


@use "abstracts/variables" as var;

/// Applies a media query to adjust styles for screens up to the width of the
/// specified breakpoint.
///
/// @param {String} $breakpoint - The key of the breakpoint from $breakpoints.
/// @require var.$breakpoints
@mixin respond-to-breakpoint($breakpoint) {

    @if map-has-key($map: var.$breakpoints, $key: $breakpoint) {

        @media screen and (max-width: map-get(var.$breakpoints, $breakpoint)) {
            @content;
        }

    }

    // Raise warning if the key doesn't exist.
    @else {
        @warn "No key `#{$breakpoint}` in $breakpoints.";
    }

}

/// Applies a media query to adjust styles for screens up to the specified
/// width.
///
/// @param {Number} $width - The max-width of the breakpoint.
@mixin respond-to-width($width) {
    @media screen and (max-width: $width) {
        @content;
    }
}

/// Uses a media query to apply the correct margin for narrow screens. Also
/// resets the width and max-width.
@mixin apply-mobile-margin {
    @include respond-to-breakpoint("small") {
        margin-left: var.$mobile-padding;
        margin-right: var.$mobile-padding;
        width: unset;
        max-width: unset;
    }
}

/// Specifies additional styles for the light theme, whether it's applied using
/// @media or .t-light. As much as possible, prefer using color variables.
@mixin light-theme() {

    // When the user has specified the light theme through their browser.
    @media screen and (prefers-color-scheme: light) {
        @content;
    }

    // When the element has been programmatically set to the light theme, or
    // when it's the child of an element that has.
    &.t-light,
    .t-light & {
        @content;
    }

}

/// Specifies additional styles for the dark theme.
@mixin dark-theme() {

    @media screen and (prefers-color-scheme: dark) {
        @content;
    }

    &.t-dark,
    .t-dark & {
        @content;
    }

}
